package com.anthonykeane.speedsignfinder;

import android.os.Environment;
import android.widget.TextView;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Created by Keanea on 6/06/13.
 */
public class pakWRData {

	private static final String TAG = "MEDIA";
	private TextView tv;


	/**
	 * Method to check whether external media available and writable. This is adapted from
	 * http://developer.android.com/guide/topics/data/data-storage.html#filesExternal
	 */

	public void checkExternalMedia() {
		boolean mExternalStorageAvailable = false;
		boolean mExternalStorageWriteable = false;
		String state = Environment.getExternalStorageState();

		if(Environment.MEDIA_MOUNTED.equals(state)) {
			// Can read and write the media
			mExternalStorageAvailable = mExternalStorageWriteable = true;
		} else if(Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
			// Can only read the media
			mExternalStorageAvailable = true;
			mExternalStorageWriteable = false;
		} else {
			// Can't read or write
			mExternalStorageAvailable = mExternalStorageWriteable = false;
		}
		tv.append("\n\nExternal Media: readable="
				+ mExternalStorageAvailable + " writable=" + mExternalStorageWriteable);
	}


	public void appendLog(String text) {
//        File logFile = new File("sdcard/1111log.file");
//        if (!logFile.exists())
//        {
//            try
//            {
//                logFile.createNewFile();
//            }
//            catch (IOException e)
//            {
//                // TODO Auto-generated catch block
//                e.printStackTrace();
//            }
//        }
//        try
//        {
//            //BufferedWriter for performance, true to set append to file flag
//            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));
//            buf.append(text);
//            buf.newLine();
//            buf.close();
//        }
//        catch (IOException e)
//        {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        }
	}


	public void generateNoteOnSD(String sBody) {

		try {
			File root = new File(Environment.getExternalStorageDirectory(), "1_SeekSign");

			if(!root.exists()) {
				root.mkdirs();

			}

			File gpxfile = new File(root, "SeekSignData.txt");

			BufferedWriter bW;

			bW = new BufferedWriter(new FileWriter(gpxfile, true));
			bW.write(sBody);
			bW.newLine();
			bW.flush();
			bW.close();
			//Toast.makeText(mContext, "Tus datos han sido guardados", Toast.LENGTH_SHORT).show();
		} catch(IOException e) {
			e.printStackTrace();
			//   importError = e.getMessage();
			// iError();
		}
	}


	/**
	 * Method to write ascii text characters to file on SD card. Note that you must add a
	 * WRITE_EXTERNAL_STORAGE permission to the manifest file or this method will throw
	 * a FileNotFound Exception because you won't have write permission.
	 */

	public void writeToSDFile(String TxtToSave) {


//        // Find the root of the external storage.
//        // See http://developer.android.com/guide/topics/data/data-  storage.html#filesExternal
//
//        File root = android.os.Environment.getExternalStorageDirectory();
//
//
//        // See http://stackoverflow.com/questions/3551821/android-write-to-sd-card-folder
//
//        File dir = new File (root.getAbsolutePath() + "/download");
//        dir.mkdirs();
//        File file = new File(dir, "1111myData.txt");
//
//        try {
//            if(!file.exists()){
//                file.createNewFile();
//            }
//
//            //true = append file
//            FileWriter fileWritter = new FileWriter(file.getName(),true);
//            BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
//            bufferWritter.write("hello");
//            bufferWritter.newLine();
//            bufferWritter.flush();
//            bufferWritter.close();
//
//
//
////            FileOutputStream f = new FileOutputStream(file);
////            PrintWriter pw = new PrintWriter(f);
////            pw.println(TxtToSave);
////            pw.flush();
////            pw.close();
////            f.close();
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//            Log.i(TAG, "******* File not found. Did you" +
//                    " add a WRITE_EXTERNAL_STORAGE permission to the   manifest?");
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

	}


	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
		String state = Environment.getExternalStorageState();
		if(Environment.MEDIA_MOUNTED.equals(state)) {
			return true;
		}
		return false;
	}


	/* Checks if external storage is available to at least read */
	public boolean isExternalStorageReadable() {
		String state = Environment.getExternalStorageState();
		if(Environment.MEDIA_MOUNTED.equals(state) ||
				Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
			return true;
		}
		return false;
	}


//    /** Method to read in a text file placed in the res/raw directory of the application. The
//     method reads in all lines of the file sequentially. */
//
//    private void readRaw(){
//        tv.append("\nData read from res/raw/textfile.txt:");
//        InputStream is = this.getResources().openRawResource(R.raw.textfile);
//        InputStreamReader isr = new InputStreamReader(is);
//        BufferedReader br = new BufferedReader(isr, 8192);    // 2nd arg is buffer size
//
//        // More efficient (less readable) implementation of above is the composite expression
//    /*BufferedReader br = new BufferedReader(new InputStreamReader(
//            this.getResources().openRawResource(R.raw.textfile)), 8192);*/
//
//        try {
//            String test;
//            while (true){
//                test = br.readLine();
//                // readLine() returns null if no more lines in the file
//                if(test == null) break;
//                tv.append("\n"+"    "+test);
//            }
//            isr.close();
//            is.close();
//            br.close();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        tv.append("\n\nThat is all");
//
}